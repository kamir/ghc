/**
 * 
 * This program is an example to illustrate how graph data is exported from
 * Apache Hadoop using the the JDBC connector to Hive, Impala or MySQL.
 *
 *
 **/

package app;

import org.etosha.hdgs.hive.HiveImportConnector;
import org.etosha.hdgs.impala.ImpalaImportConnector;
import org.etosha.hdgs.mysql.MySQLImportConnector;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.graph.api.UndirectedGraph;
import org.gephi.project.api.ProjectController;
import org.gephi.project.api.Workspace;
import org.openide.util.Lookup;

/**
 *
 * @author webex
 */
public class SimpleGraphExporter extends javax.swing.JFrame {
    
    public static String HIVE_SERVER2_IP = "192.168.3.170";
    public static String HIVE_SERVER_IP = "192.168.3.171";
    public static String MySQL_SERVER_IP = "192.168.3.106";
    
    /**
     * Creates new form SimpleGraphExporter
     */
    public SimpleGraphExporter() {
          
        initComponents();
         
        resetWorkspace();
        
        updateWorkspaceStatus();
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        ws_info_f1 = new javax.swing.JLabel();
        jrbDirected = new javax.swing.JRadioButton();
        jrbHierarchical = new javax.swing.JRadioButton();
        jrbMixed = new javax.swing.JRadioButton();
        jrbUndirected = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jlEdges = new javax.swing.JLabel();
        jlNodes = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jPanel1.border.title"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 593, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 86, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ws_info_f1, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.ws_info_f1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jrbDirected, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jrbDirected.text")); // NOI18N
        jrbDirected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbDirectedActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jrbHierarchical, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jrbHierarchical.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jrbMixed, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jrbMixed.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jrbUndirected, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jrbUndirected.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jLabel2.text")); // NOI18N

        jlEdges.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jlEdges, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jlEdges.text")); // NOI18N

        jlNodes.setBackground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jlNodes, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jlNodes.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ws_info_f1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jlEdges, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .addComponent(jlNodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 295, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbDirected)
                    .addComponent(jrbUndirected)
                    .addComponent(jrbMixed)
                    .addComponent(jrbHierarchical))
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jrbDirected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbUndirected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbHierarchical)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbMixed)
                .addGap(0, 35, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(ws_info_f1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jlEdges))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlNodes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        fileMenu.setMnemonic('f');
        org.openide.awt.Mnemonics.setLocalizedText(fileMenu, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.fileMenu.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jMenuItem1, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.jMenuItem1.text")); // NOI18N
        fileMenu.add(jMenuItem1);

        openMenuItem.setMnemonic('o');
        org.openide.awt.Mnemonics.setLocalizedText(openMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.openMenuItem.text")); // NOI18N
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        org.openide.awt.Mnemonics.setLocalizedText(saveMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.saveMenuItem.text")); // NOI18N
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        org.openide.awt.Mnemonics.setLocalizedText(saveAsMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.saveAsMenuItem.text")); // NOI18N
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        org.openide.awt.Mnemonics.setLocalizedText(exitMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.exitMenuItem.text")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        org.openide.awt.Mnemonics.setLocalizedText(editMenu, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.editMenu.text")); // NOI18N

        cutMenuItem.setMnemonic('t');
        org.openide.awt.Mnemonics.setLocalizedText(cutMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.cutMenuItem.text")); // NOI18N
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        org.openide.awt.Mnemonics.setLocalizedText(copyMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.copyMenuItem.text")); // NOI18N
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        org.openide.awt.Mnemonics.setLocalizedText(pasteMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.pasteMenuItem.text")); // NOI18N
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        org.openide.awt.Mnemonics.setLocalizedText(deleteMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.deleteMenuItem.text")); // NOI18N
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        org.openide.awt.Mnemonics.setLocalizedText(helpMenu, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.helpMenu.text")); // NOI18N
        helpMenu.setEnabled(false);

        contentsMenuItem.setMnemonic('c');
        org.openide.awt.Mnemonics.setLocalizedText(contentsMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.contentsMenuItem.text")); // NOI18N
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        org.openide.awt.Mnemonics.setLocalizedText(aboutMenuItem, org.openide.util.NbBundle.getMessage(SimpleGraphExporter.class, "SimpleGraphExporter.aboutMenuItem.text")); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jrbDirectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbDirectedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrbDirectedActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        resetWorkspace();
        setWaiting();
        MySQLImportConnector.main( null );
        updateWorkspaceStatus();
        setDone();       
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        resetWorkspace();
        setWaiting();
        HiveImportConnector.main( null );
        setDone();       
        updateWorkspaceStatus();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        resetWorkspace();
        setWaiting();
        ImpalaImportConnector.main( null );
        setDone();       
        updateWorkspaceStatus();
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleGraphExporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleGraphExporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleGraphExporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleGraphExporter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
                new SimpleGraphExporter().setVisible(false);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlEdges;
    private javax.swing.JLabel jlNodes;
    private javax.swing.JRadioButton jrbDirected;
    private javax.swing.JRadioButton jrbHierarchical;
    private javax.swing.JRadioButton jrbMixed;
    private javax.swing.JRadioButton jrbUndirected;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel ws_info_f1;
    // End of variables declaration//GEN-END:variables

    

    private void updateWorkspaceStatus() {
        
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);

        Workspace workspace = pc.getCurrentWorkspace();
    
        GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();
        AttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();

        boolean isDirected = graphModel.isDirected();
        boolean isUnDirected = graphModel.isUndirected();
        boolean isHierarchical = graphModel.isHierarchical();
        boolean isMixed = graphModel.isMixed();
        
        this.jrbDirected.setSelected(isDirected);
        this.jrbUndirected.setSelected(isDirected);
        this.jrbHierarchical.setSelected(isHierarchical);
        this.jrbMixed.setSelected(isMixed);
        
        UndirectedGraph graph = graphModel.getUndirectedGraph();
        System.out.println("Nodes: " + graph.getNodeCount());
        System.out.println("Edges: " + graph.getEdgeCount());
        
        this.jlEdges.setText(""+graph.getEdgeCount());        
        this.jlNodes.setText(""+graph.getNodeCount());        

        this.rootPane.repaint();
    }

    private void resetWorkspace() {
        System.out.println(">>> RESET workspace now ... (no save!!!)");

        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.closeCurrentProject();
    
        pc.newProject();
    }

    private void setWaiting() {
        // indicate activity via MousePointer ...
    }

    private void setDone() {

    }

    public void centerOnScreen() {
         
        setVisible(true);
        System.out.println( ">>> open Hadoop connector GUI ... ");
    }

}
